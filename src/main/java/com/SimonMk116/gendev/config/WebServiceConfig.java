package com.SimonMk116.gendev.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.oxm.jaxb.Jaxb2Marshaller;
import org.springframework.ws.client.WebServiceClientException;
import org.springframework.ws.client.core.WebServiceTemplate;
import org.springframework.ws.client.support.interceptor.ClientInterceptor;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.transport.context.TransportContext;
import org.springframework.ws.transport.context.TransportContextHolder;
import org.springframework.ws.transport.http.HttpUrlConnection;

import java.io.IOException;
import java.net.URISyntaxException;


@Configuration
public class WebServiceConfig {

    @Value("${provider.webwunder.endpoint}")
    private String endpoint;
    @Value("${provider.webwunder.api-key}")
    private String apiKey;

    @Bean
    public Jaxb2Marshaller marshaller() {
        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();
        marshaller.setContextPath("com.SimonMk116.gendev.service.webwunderservice.autogenerated");
        return marshaller;
    }

    @Bean
    public WebServiceTemplate webServiceTemplate(Jaxb2Marshaller marshaller) {
        WebServiceTemplate template = new WebServiceTemplate();
        template.setMarshaller(marshaller);
        template.setUnmarshaller(marshaller);
        template.setDefaultUri(endpoint);
        //template.setMessageSender(messageSender);
        // Add custom interceptor
        template.setInterceptors(new ClientInterceptor[]{
                new HttpHeaderInterceptor(apiKey)});
        return template;
    }

    static class HttpHeaderInterceptor implements ClientInterceptor {

        private final String apiKey;
        public HttpHeaderInterceptor(String apiKey) {
            this.apiKey = apiKey;
        }

        @Override
        public boolean handleRequest(MessageContext messageContext) {
            try {
                TransportContext context = TransportContextHolder.getTransportContext();
                HttpUrlConnection connection = (HttpUrlConnection) context.getConnection();
                String uri = connection.getUri().toString();
                if (uri.startsWith("https://webwunder.gendev7.check24.fun/")) {  //is api connection
                    connection.addRequestHeader("X-Api-Key", apiKey);
                }
            } catch (IOException | URISyntaxException e) {
                throw new RuntimeException("Failed to add API key header",e);
            }
            return true;
        }

        @Override
        public boolean handleResponse(MessageContext messageContext) {
            return true;
        }
        @Override
        public boolean handleFault(MessageContext messageContext) {
            return true;
        }
        @Override
        public void afterCompletion(MessageContext messageContext, Exception e) throws WebServiceClientException {
        }
    }
}