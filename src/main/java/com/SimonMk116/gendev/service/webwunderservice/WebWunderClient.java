package com.SimonMk116.gendev.service.webwunderservice;

import com.SimonMk116.gendev.dto.SearchRequests;
import com.SimonMk116.gendev.service.webwunderservice.autogenerated.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.ws.client.WebServiceIOException;
import org.springframework.ws.client.core.support.WebServiceGatewaySupport;
import org.springframework.ws.soap.client.SoapFaultClientException;

@Component
public class WebWunderClient extends WebServiceGatewaySupport {

    private static final Logger logger = LoggerFactory.getLogger(WebWunderClient.class);
    private static final int MAX_RETRIES = 3;
    private static final long RETRY_DELAY_MS = 1000;

    public Output getInternetOffers(SearchRequests searchRequests) {
        // Prepare the request
        Address address = new Address();
        address.setStreet(searchRequests.getStreet());
        address.setHouseNumber(searchRequests.getHouseNumber());
        address.setCity(searchRequests.getCity());
        address.setPlz(searchRequests.getPlz());

        Input input = new Input();
        input.setAddress(address);
        input.setConnectionEnum(ConnectionType.DSL);
        input.setInstallation(true);

        LegacyGetInternetOffers request = new LegacyGetInternetOffers();
        request.setInput(input);

        int retryCount = 0;
        while (retryCount < MAX_RETRIES) {
            try {
                return (Output) getWebServiceTemplate().marshalSendAndReceive(request);
            } catch (SoapFaultClientException e) {
                logger.warn("SOAP Fault encountered (Temporär nicht verfügbar). Retrying ... (Attempt " + (retryCount + 1) + "/" + MAX_RETRIES + ")");
                retryCount++;
                try {
                    Thread.sleep(RETRY_DELAY_MS);
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                    break; // Exit retry loop if interrupted
                }
                /*if (retryCount >= MAX_RETRIES) {
                    logger.warn("Max retries reached for SOAP request. Failing.");
                    throw e; // Re-throw the exception after max retries
                }*/
            } catch (WebServiceIOException e) {
                logger.warn("IO Exception during SOAP request. Retrying ... (Attempt " + (retryCount + 1) + "/" + MAX_RETRIES + "): " + e.getMessage());
                retryCount++;
                try {
                    Thread.sleep(RETRY_DELAY_MS);
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                    break; // Exit retry loop if interrupted
                }
                /*if (retryCount >= MAX_RETRIES) {
                    logger.warn("Max retries reached for SOAP request due to IO issues. Failing.");
                    throw e; // Re-throw the exception after max retries
                }*/
            } catch (Exception e) {
                logger.warn("An unexpected error occurred during SOAP request. Not retrying: " + e.getMessage());
                return null;
            }
        }
        logger.warn("Max retries reached for WebWunder SOAP request. Returning empty result.");
        return null;
    }
}
