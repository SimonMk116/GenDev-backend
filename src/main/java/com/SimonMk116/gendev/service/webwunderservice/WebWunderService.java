package com.SimonMk116.gendev.service.webwunderservice;

import com.SimonMk116.gendev.controller.OfferController;
import com.SimonMk116.gendev.dto.SearchRequests;
import com.SimonMk116.gendev.model.InternetOffer;
import com.SimonMk116.gendev.model.RequestAddress;
import com.SimonMk116.gendev.service.webwunderservice.autogenerated.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.time.Duration;
import java.time.Instant;

@Service
public class WebWunderService implements OfferController.InternetOfferService{

    private static final Logger logger = LoggerFactory.getLogger(WebWunderService.class);
    private final WebWunderClient webWunderClient;

    @Autowired
    public WebWunderService(WebWunderClient client) {
        this.webWunderClient = client;
    }

    private Mono<Output> fetchOffersFromWebWunder(RequestAddress address) {
        SearchRequests request = new SearchRequests(
                address.getStrasse(),
                address.getHausnummer(),
                address.getStadt(),
                address.getPostleitzahl()
        );
        return Mono.fromCallable(() -> webWunderClient.getInternetOffers(request))
                .doOnNext(output -> {
                    if (output == null) {
                        logger.warn("WebWunderClient returned null output for address: {}", address);
                    } else if (output.getProducts() == null) {
                        logger.warn("WebWunderClient output.getProducts() returned null for address: {}", address);
                    }
                })
                .onErrorResume(Exception.class, e -> {
                    logger.error("Error fetching offers from WebWunder for address: {}", address, e);
                    return Mono.empty();
                });
    }

    private InternetOffer mapProductToInternetOffer(Product product) {
        ProductInfo info = product.getProductInfo();

        if (info == null) {
            logger.warn("Warning: Product without productInfo (productID={})", product.getProductId());
            return null;
        }

        // Init voucher fields
        String voucherType = null;
        Integer percentage = null;
        Integer maxDiscountInCent = null;
        Integer discountInCent = null;
        Integer minOrderValueInCent = null;

        Voucher voucher = info.getVoucher();
        if (voucher instanceof PercentageVoucher pv) {
            voucherType = "PERCENTAGE";
            percentage = pv.getPercentage();
            maxDiscountInCent = pv.getMaxDiscountInCent();
        } else if (voucher instanceof AbsoluteVoucher av) {
            voucherType = "ABSOLUTE";
            discountInCent = av.getDiscountInCent();
            minOrderValueInCent = av.getMinOrderValueInCent();
        }

        return new InternetOffer(
                String.valueOf(product.getProductId()),
                product.getProviderName(),
                product.getProductInfo().getSpeed(),
                product.getProductInfo().getMonthlyCostInCent(),
                product.getProductInfo().getMonthlyCostInCentFrom25ThMonth(),
                product.getProductInfo().getContractDurationInMonths(),
                product.getProductInfo().getConnectionType().toString(),
                voucherType,
                percentage,
                maxDiscountInCent,
                discountInCent,
                minOrderValueInCent
        );
    }

    @Override
    public Flux<InternetOffer> getOffers(RequestAddress address) {
        Instant overallStartTime = Instant.now();
        return fetchOffersFromWebWunder(address)
                .flatMapMany(output -> {
                    if (output != null && output.getProducts() != null) {
                        return Flux.fromIterable(output.getProducts())
                                .mapNotNull(this::mapProductToInternetOffer);
                    }
                    return Flux.empty();
                })
                .doOnComplete(() -> logger.info("WebWunderService took {}", Duration.between(overallStartTime, Instant.now()).toMillis()))
                .onErrorResume(Exception.class, e -> {
                    logger.error("Error processing WebWunder offers for address: {} ms", address, e);
                    return Flux.empty();
                });
    }

}